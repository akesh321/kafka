<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
    <actions/>
    <description>Dockerized web application CI/CD pipeline</description>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
            <useBuildBlocker>false</useBuildBlocker>
            <blockLevel>GLOBAL</blockLevel>
            <scanQueueFor>DISABLED</scanQueueFor>
            <blockingJobs></blockingJobs>
        </hudson.plugins.buildblocker.BuildBlockerProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
        <script>
pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "dockerized-app"
        CONTAINER_NAME = "app-container"
        HOST_PORT = "8080"
        CONTAINER_PORT = "80"
    }
    
    stages {
        stage('Pull Code') {
            steps {
                script {
                    echo "Pulling code from GitHub repository..."
                    // Clean workspace
                    deleteDir()
                    
                    // Clone repository
                    git branch: 'main', 
                        url: 'https://github.com/docker/getting-started.git'
                    
                    echo "Code pulled successfully!"
                    sh 'ls -la'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    
                    // Stop and remove existing container if exists
                    sh '''
                        docker stop ${CONTAINER_NAME} || true
                        docker rm ${CONTAINER_NAME} || true
                        docker rmi ${DOCKER_IMAGE} || true
                    '''
                    
                    // Build Docker image
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    
                    echo "Docker image built successfully!"
                    sh "docker images | grep ${DOCKER_IMAGE}"
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    echo "Running Docker container..."
                    
                    // Run container
                    sh """
                        docker run -d \
                            --name ${CONTAINER_NAME} \
                            -p ${HOST_PORT}:${CONTAINER_PORT} \
                            ${DOCKER_IMAGE}
                    """
                    
                    echo "Container started successfully!"
                    sh "docker ps | grep ${CONTAINER_NAME}"
                }
            }
        }
        
        stage('Test Deployment') {
            steps {
                script {
                    echo "Testing deployment..."
                    
                    // Wait for container to be ready
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // Test HTTP endpoint
                    sh """
                        curl -f http://localhost:${HOST_PORT} || exit 1
                        echo "Application is accessible!"
                    """
                    
                    // Show container logs
                    sh "docker logs ${CONTAINER_NAME}"
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline execution completed!"
        }
        success {
            echo "Pipeline executed successfully!"
            echo "Application is running at: http://localhost:${HOST_PORT}"
        }
        failure {
            echo "Pipeline failed!"
            // Cleanup on failure
            sh '''
                docker stop ${CONTAINER_NAME} || true
                docker rm ${CONTAINER_NAME} || true
            '''
        }
    }
}
    </script>
        <sandbox>true</sandbox>
    </definition>
    <triggers/>
    <disabled>false</disabled>
</flow-definition>
